#1 بتحليل العلاقة بين سعر المنتج والمبيعات الإجمالية باستخدام الانحدار الخطي.

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression



# استخراج المتغيرات المستقلة والتابعة
X = df[["Price"]].values  # المتغير المستقل (السعر)
y = df["Total_Sales"].values  # المتغير التابع (إجمالي المبيعات)

# إنشاء نموذج الانحدار الخطي وتدريبه
model = LinearRegression()
model.fit(X, y)

# توقع القيم باستخدام النموذج
y_pred = model.predict(X)

# رسم البيانات الفعلية
plt.figure(figsize=(10, 5))
plt.scatter(df["Price"], df["Total_Sales"], color="blue", label="act Data")

# رسم خط الانحدار الخطي
plt.plot(df["Price"], y_pred, color="red", label="Linear regression")

# إعدادات الرسم
plt.xlabel("price")
plt.ylabel("total sales")
plt.title("Linear regression")
plt.legend()
plt.grid()
plt.show()


#2 رسم box plot يعطي صورة سريعة عن متوسط الأسعار والمبيعات
import pandas as pd
import matplotlib.pyplot as plt


# إنشاء مخطط Box Plot للأسعار وإجمالي المبيعات
plt.figure(figsize=(12, 6))

# رسم Box Plot للأسعار
plt.subplot(1, 2, 1)
plt.boxplot(df["Price"], vert=True, patch_artist=True)
plt.title("Box Plot of Prices")
plt.ylabel("Price")

# رسم Box Plot لإجمالي المبيعات
plt.subplot(1, 2, 2)
plt.boxplot(df["Total_Sales"], vert=True, patch_artist=True)
plt.title("Box Plot of Total Sales")
plt.ylabel("Total Sales")

# عرض الرسم
plt.tight_layout()
plt.show()



#3خمس قيم إحصائية مهمة
mean_sales = df["Total_Sales"].mean()

# حساب الوسيط (القيمة الوسطى)
median_sales = df["Total_Sales"].median()


# حساب الانحراف المعياري (لقياس التشتت)
std_sales = df["Total_Sales"].std()

# حساب القيم الدنيا والقصوى
min_sales = df["Total_Sales"].min()
max_sales = df["Total_Sales"].max()

# عرض النتائج
print(f"متوسط المبيعات: {mean_sales:.2f}")
print(f"الوسيط: {median_sales:.2f}")
print(f"الانحراف المعياري: {std_sales:.2f}")
print(f"أقل مبيعات: {min_sales:.2f}")
print(f"أعلى مبيعات: {max_sales:.2f}")


#4  تحديد المنتجات الأكثر مبيعاً عن طريق تحديد عدد التكرارات والنسب من المبيعات 
product_counts = df["Product"].value_counts()

# حساب نسبة كل منتج من إجمالي البيانات
product_percentage = df["Product"].value_counts(normalize=True) * 100

# عرض النتائج
print("تكرار المنتجات:")
print(product_counts)

print("\nنسبة المنتجات من إجمالي البيانات:")
print(product_percentage)


#5تحليلاً محسناً للمبيعات اليومية

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

df["Date"] = pd.to_datetime(df["Date"], errors="coerce")  # تحويل التواريخ
daily_sales = df.groupby("Date")["Total_Sales"].sum()  # تجميع المبيعات

plt.figure(figsize=(12, 6))
plt.plot(daily_sales, marker="o", linestyle="-", color="b")  # الرسم مباشرة باستخدام الفهرس (التواريخ)

plt.gca().xaxis.set_major_locator(mdates.MonthLocator())  
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%b %Y"))  

plt.title("اتجاه المبيعات اليومي")
plt.xticks(rotation=45)
plt.grid()
plt.show()

#او 
6
import matplotlib.pyplot as plt

# رسم مبيعات الهواتف
plt.figure(figsize=(10, 5))
plt.bar(phone_sales["Date"], phone_sales["Total_Sales"], color="blue")
plt.title("مبيعات الهواتف")
plt.xlabel("التاريخ")
plt.ylabel("إجمالي المبيعات")
plt.xticks(rotation=45)
plt.show()



#7 لمعرفة اعلى منتجات مبيعا اكبر من مبلغ معين
high_sales = df[df["Total_Sales"] > 5000]
print(high_sales)
print(high_sales.head())


#8 
phone_sales = df[df["Product"] == "Phone"]
print(phone_sales.head(10))
print(phone_sales)

#9 تجميع المبيعات لكل منتج
product_sales = df.groupby("Product")["Total_Sales"].sum().reset_index()

# ترتيب المنتجات بناءً على إجمالي المبيعات تنازليًا
top_products = product_sales.sort_values(by="Total_Sales", ascending=False)

# استخراج أفضل 3 منتجات من حيث المبيعات (رقم 1)
top_3_products = top_products.head(3)

# استخراج المنتجات في المراكز 4-6 (رقم 2)
next_3_products = top_products.iloc[3:6]

# استخراج المنتجات في المراكز 7-9 (رقم 3)
third_3_products = top_products.iloc[6:9]

# عرض النتائج
print(" أفضل 3 منتجات رقم 1:")
print(top_3_products)

print(" أفضل 3 منتجات رقم 2:")
print(next_3_products)

print(" أفضل 3 منتجات رقم 3:")
print(third_3_products)

#10 حساب الربع الأدنى للمنتجات 
import pandas as pd

# تجميع إجمالي المبيعات لكل منتج
sales_summary = df.groupby("Product")["Total_Sales"].sum().reset_index()

# حساب الربع الأدنى (Q1) للمبيعات بعد التجميع
Q1 = sales_summary["Total_Sales"].quantile(0.25)

# استخراج المنتجات ذات المبيعات المنخفضة (أقل من أو يساوي Q1)
low_sales_products = sales_summary[sales_summary["Total_Sales"] <= Q1]

# عرض النتائج
print(low_sales_products)




