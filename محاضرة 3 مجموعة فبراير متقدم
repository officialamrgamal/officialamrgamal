#1استيراد الملف الجديد اسمه بيانات بيع 
import pandas as pd

file_name = "بيانات بيع.csv"

df = pd.read_csv(file_name, sep=';')
pd.set_option("display.max_rows", None)
print(df)

# يجب تحويل التواريخ 
df["Date"] = pd.to_datetime(df["Date"], errors="coerce")  # تحويل التواريخ

#2خمس قيم إحصائية مهمة
mean_sales = df["Total_Sales"].mean()

# حساب الوسيط (القيمة الوسطى)
median_sales = df["Total_Sales"].median()


# حساب الانحراف المعياري (لقياس التشتت)
std_sales = df["Total_Sales"].std()

# حساب القيم الدنيا والقصوى
min_sales = df["Total_Sales"].min()
max_sales = df["Total_Sales"].max()

# عرض النتائج
print(f"متوسط المبيعات: {mean_sales:.2f}")
print(f"الوسيط: {median_sales:.2f}")
print(f"الانحراف المعياري: {std_sales:.2f}")
print(f"أقل مبيعات: {min_sales:.2f}")
print(f"أعلى مبيعات: {max_sales:.2f}")



#3 رسم box plot يعطي صورة سريعة عن الوسيط في الأسعار والمبيعات
import pandas as pd
import matplotlib.pyplot as plt


# إنشاء مخطط Box Plot للأسعار وإجمالي المبيعات
plt.figure(figsize=(12, 6))

# رسم Box Plot للأسعار
plt.subplot(1, 2, 1)
plt.boxplot(df["Price"], vert=True, patch_artist=True)
plt.title("Box Plot of Prices")
plt.ylabel("Price")

# رسم Box Plot لإجمالي المبيعات
plt.subplot(1, 2, 2)
plt.boxplot(df["Total_Sales"], vert=True, patch_artist=True)
plt.title("Box Plot of Total Sales")
plt.ylabel("Total Sales")

# عرض الرسم
plt.tight_layout()
plt.show()



#4 تحديد المنتجات الأكثر مبيعاً عن طريق تحديد عدد التكرارات والنسب من المبيعات 
product_counts = df["Product"].value_counts()

# حساب نسبة كل منتج من إجمالي البيانات
product_percentage = df["Product"].value_counts(normalize=True) * 100

# عرض النتائج
print("تكرار المنتجات:")
print(product_counts)

print("\nنسبة المنتجات من إجمالي البيانات:")
print(product_percentage)



#5 نجمع مبيعات التليفونات فقط 
phone_sales = df[df["Product"] == "Phone"]
print(phone_sales.head(10))
print(phone_sales)


#6 معالجة رسم مخطط خطي لحساب مبيعات شهرية للتليفونات فقط 
import matplotlib.pyplot as plt
df["Date"] = pd.to_datetime(df["Date"], errors="coerce") 
# رسم مبيعات الهواتف
plt.figure(figsize=(10, 5))
plt.bar(phone_sales["Date"], phone_sales["Total_Sales"], color="blue")
plt.title("مبيعات الهواتف")
plt.xlabel("التاريخ")
plt.ylabel("إجمالي المبيعات")
plt.xticks(rotation=45)
plt.show()


#تحليل للمبيعات اكبر من 7 
high_sales = df[df["Total_Sales"] > 2000]
print(high_sales)
#or
print(high_sales.head(10))


#8  ثم تحديد اكثر 3 منتجات 1 واكثر 3 منتجات رقم 2 واكثر 3 منتجات رقم 3 تجميع المبيعات لكل منتج
product_sales = df.groupby("Product")["Total_Sales"].sum().reset_index()

# ترتيب المنتجات بناءً على إجمالي المبيعات تنازليًا
top_products = product_sales.sort_values(by="Total_Sales", ascending=False)

# استخراج أفضل 3 منتجات من حيث المبيعات (رقم 1)
top_3_products = top_products.head(3)

# استخراج المنتجات في المراكز 4-6 (رقم 2)
next_3_products = top_products.iloc[3:6]

# استخراج المنتجات في المراكز 7-9 (رقم 3)
third_3_products = top_products.iloc[6:9]

# عرض النتائج
print(" أفضل 3 منتجات رقم 1:")
print(top_3_products)

print(" أفضل 3 منتجات رقم 2:")
print(next_3_products)

print(" أفضل 3 منتجات رقم 3:")
print(third_3_products)

#9 حساب الربع الأدنى للمنتجات 
import pandas as pd

# تجميع إجمالي المبيعات لكل منتج
sales_summary = df.groupby("Product")["Total_Sales"].sum().reset_index()

# حساب الربع الأدنى (Q1) للمبيعات بعد التجميع
Q1 = sales_summary["Total_Sales"].quantile(0.25)

# استخراج المنتجات ذات المبيعات المنخفضة (أقل من أو يساوي Q1)
low_sales_products = sales_summary[sales_summary["Total_Sales"] <= Q1]


# عرض النتائج
print(low_sales_products)




#10استخدم مكتبة التعلم الآلي  المحسنه

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

# 1. استخراج المتغيرات المستقلة والتابعة
X = df[["Price"]].values  # المتغير المستقل (السعر)
y = df["Total_Sales"].values  # المتغير التابع (إجمالي المبيعات)

# 2. تقسيم البيانات إلى مجموعتي تدريب واختبار
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. إنشاء وتدريب نموذج الانحدار الخطي
model = LinearRegression()
model.fit(X_train, y_train)

# 4. توقع القيم باستخدام النموذج
y_pred = model.predict(X_test)

# 5. تقييم أداء النموذج
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
print(f"R-squared: {r2:.2f}")
print(f"Mean Squared Error: {mse:.2f}")

# 6. رسم البيانات الفعلية وخط الانحدار
plt.figure(figsize=(10, 5))
plt.scatter(X_test, y_test, color="blue", label="Actual Data")
plt.plot(X_test, y_pred, color="red", label="Linear Regression")
plt.xlabel("Price")
plt.ylabel("Total Sales")
plt.title("Linear Regression")
plt.legend()
plt.grid()
plt.show()

